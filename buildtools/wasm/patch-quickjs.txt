diff --git a/Makefile b/Makefile
index 9b003f0..6e93e7f 100644
--- a/Makefile
+++ b/Makefile
@@ -34,12 +34,6 @@ CONFIG_LTO=y
 # force 32 bit build for some utilities
 #CONFIG_M32=y
 
-ifdef CONFIG_DARWIN
-# use clang instead of gcc
-CONFIG_CLANG=y
-CONFIG_DEFAULT_AR=y
-endif
-
 # installation directory
 prefix=/usr/local
 
@@ -85,15 +79,9 @@ ifdef CONFIG_CLANG
     endif
   endif
 else
-  HOST_CC=gcc
-  CC=$(CROSS_PREFIX)gcc
+  HOST_CC=$(CC)
   CFLAGS=-g -Wall -MMD -MF $(OBJDIR)/$(@F).d
   CFLAGS += -Wno-array-bounds -Wno-format-truncation
-  ifdef CONFIG_LTO
-    AR=$(CROSS_PREFIX)gcc-ar
-  else
-    AR=$(CROSS_PREFIX)ar
-  endif
 endif
 STRIP=$(CROSS_PREFIX)strip
 CFLAGS+=-fwrapv # ensure that signed overflows behave as expected
@@ -109,6 +97,7 @@ DEFINES+=-D__USE_MINGW_ANSI_STDIO # for standard snprintf behavior
 endif
 
 CFLAGS+=$(DEFINES)
+CFLAGS+=$(CUSTOM_CFLAGS)
 CFLAGS_DEBUG=$(CFLAGS) -O0
 CFLAGS_SMALL=$(CFLAGS) -Os
 CFLAGS_OPT=$(CFLAGS) -O2
diff --git a/qjsc.c b/qjsc.c
index f8e60b3..f77f2f0 100644
--- a/qjsc.c
+++ b/qjsc.c
@@ -29,7 +29,7 @@
 #include <assert.h>
 #include <unistd.h>
 #include <errno.h>
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(__wasi__)
 #include <sys/wait.h>
 #endif
 
@@ -373,7 +373,7 @@ void help(void)
     exit(1);
 }
 
-#if defined(CONFIG_CC) && !defined(_WIN32)
+#if defined(CONFIG_CC) && !defined(_WIN32) && !defined(__wasi__)
 
 int exec_cmd(char **argv)
 {
diff --git a/quickjs-libc.c b/quickjs-libc.c
index ea73ee8..5db9460 100644
--- a/quickjs-libc.c
+++ b/quickjs-libc.c
@@ -42,10 +42,12 @@
 #include <conio.h>
 #include <utime.h>
 #else
+#if !defined(__wasi__)
 #include <dlfcn.h>
 #include <termios.h>
-#include <sys/ioctl.h>
 #include <sys/wait.h>
+#endif
+#include <sys/ioctl.h>
 
 #if defined(__APPLE__)
 typedef sig_t sighandler_t;
@@ -57,7 +59,7 @@ typedef sig_t sighandler_t;
 
 #endif
 
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(__wasi__)
 /* enable the os.Worker API. IT relies on POSIX threads */
 #define USE_WORKER
 #endif
@@ -453,7 +455,7 @@ typedef JSModuleDef *(JSInitModuleFunc)(JSContext *ctx,
                                         const char *module_name);
 
 
-#if defined(_WIN32)
+#if defined(_WIN32) || defined(__wasi__)
 static JSModuleDef *js_module_loader_so(JSContext *ctx,
                                         const char *module_name)
 {
@@ -530,7 +532,7 @@ int js_module_set_import_meta(JSContext *ctx, JSValueConst func_val,
         return -1;
     if (!strchr(module_name, ':')) {
         strcpy(buf, "file://");
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(__wasi__)
         /* realpath() cannot be used with modules compiled with qjsc
            because the corresponding module source code is not
            necessarily present */
@@ -803,9 +805,11 @@ static void js_std_file_finalizer(JSRuntime *rt, JSValue val)
     JSSTDFile *s = JS_GetOpaque(val, js_std_file_class_id);
     if (s) {
         if (s->f && s->close_in_finalizer) {
+#if !defined(__wasi__)
             if (s->is_popen)
                 pclose(s->f);
             else
+#endif
                 fclose(s->f);
         }
         js_free_rt(rt, s);
@@ -910,6 +914,7 @@ static JSValue js_std_open(JSContext *ctx, JSValueConst this_val,
 static JSValue js_std_popen(JSContext *ctx, JSValueConst this_val,
                             int argc, JSValueConst *argv)
 {
+#if !defined(__wasi__)
     const char *filename, *mode = NULL;
     FILE *f;
     int err;
@@ -940,6 +945,7 @@ static JSValue js_std_popen(JSContext *ctx, JSValueConst this_val,
  fail:
     JS_FreeCString(ctx, filename);
     JS_FreeCString(ctx, mode);
+#endif
     return JS_EXCEPTION;
 }
 
@@ -976,6 +982,7 @@ static JSValue js_std_fdopen(JSContext *ctx, JSValueConst this_val,
     return JS_EXCEPTION;
 }
 
+#if !defined(__wasi__)
 static JSValue js_std_tmpfile(JSContext *ctx, JSValueConst this_val,
                               int argc, JSValueConst *argv)
 {
@@ -987,6 +994,7 @@ static JSValue js_std_tmpfile(JSContext *ctx, JSValueConst this_val,
         return JS_NULL;
     return js_new_std_file(ctx, f, TRUE, FALSE);
 }
+#endif
 
 static JSValue js_std_sprintf(JSContext *ctx, JSValueConst this_val,
                           int argc, JSValueConst *argv)
@@ -1047,9 +1055,11 @@ static JSValue js_std_file_close(JSContext *ctx, JSValueConst this_val,
         return JS_EXCEPTION;
     if (!s->f)
         return JS_ThrowTypeError(ctx, "invalid file handle");
+#if !defined(__wasi__)
     if (s->is_popen)
         err = js_get_errno(pclose(s->f));
     else
+#endif
         err = js_get_errno(fclose(s->f));
     s->f = NULL;
     return JS_NewInt32(ctx, err);
@@ -1279,6 +1289,7 @@ static JSValue js_std_file_putByte(JSContext *ctx, JSValueConst this_val,
 }
 
 /* urlGet */
+#if !defined(__wasi__)
 
 #define URL_GET_PROGRAM "curl -s -i"
 #define URL_GET_BUF_SIZE 4096
@@ -1463,6 +1474,7 @@ static JSValue js_std_urlGet(JSContext *ctx, JSValueConst this_val,
     JS_FreeValue(ctx, response);
     return JS_EXCEPTION;
 }
+#endif
 
 static JSClassDef js_std_file_class = {
     "FILE",
@@ -1495,7 +1507,9 @@ static const JSCFunctionListEntry js_std_funcs[] = {
     JS_CFUNC_DEF("setenv", 1, js_std_setenv ),
     JS_CFUNC_DEF("unsetenv", 1, js_std_unsetenv ),
     JS_CFUNC_DEF("getenviron", 1, js_std_getenviron ),
+#if !defined(__wasi__)
     JS_CFUNC_DEF("urlGet", 1, js_std_urlGet ),
+#endif
     JS_CFUNC_DEF("loadFile", 1, js_std_loadFile ),
     JS_CFUNC_DEF("strerror", 1, js_std_strerror ),
     JS_CFUNC_DEF("parseExtJSON", 1, js_std_parseExtJSON ),
@@ -1504,7 +1518,9 @@ static const JSCFunctionListEntry js_std_funcs[] = {
     JS_CFUNC_DEF("open", 2, js_std_open ),
     JS_CFUNC_DEF("popen", 2, js_std_popen ),
     JS_CFUNC_DEF("fdopen", 2, js_std_fdopen ),
+#if !defined(__wasi__)
     JS_CFUNC_DEF("tmpfile", 0, js_std_tmpfile ),
+#endif
     JS_CFUNC_MAGIC_DEF("puts", 1, js_std_file_puts, 0 ),
     JS_CFUNC_DEF("printf", 1, js_std_printf ),
     JS_CFUNC_DEF("sprintf", 1, js_std_sprintf ),
@@ -1720,6 +1736,7 @@ static JSValue js_os_ttySetRaw(JSContext *ctx, JSValueConst this_val,
 static JSValue js_os_ttyGetWinSize(JSContext *ctx, JSValueConst this_val,
                                    int argc, JSValueConst *argv)
 {
+#ifndef __wasi__
     int fd;
     struct winsize ws;
     JSValue obj;
@@ -1737,19 +1754,27 @@ static JSValue js_os_ttyGetWinSize(JSContext *ctx, JSValueConst this_val,
     } else {
         return JS_NULL;
     }
+#else
+    return JS_NULL;
+#endif
 }
 
+#ifndef __wasi__
 static struct termios oldtty;
+#endif
 
 static void term_exit(void)
 {
+#ifndef __wasi__
     tcsetattr(0, TCSANOW, &oldtty);
+#endif
 }
 
 /* XXX: should add a way to go back to normal mode */
 static JSValue js_os_ttySetRaw(JSContext *ctx, JSValueConst this_val,
                                int argc, JSValueConst *argv)
 {
+#ifndef __wasi__
     struct termios tty;
     int fd;
     
@@ -1772,6 +1797,7 @@ static JSValue js_os_ttySetRaw(JSContext *ctx, JSValueConst this_val,
     tcsetattr(fd, TCSANOW, &tty);
 
     atexit(term_exit);
+#endif
     return JS_UNDEFINED;
 }
 
@@ -2712,6 +2738,7 @@ static char *realpath(const char *path, char *buf)
 static JSValue js_os_realpath(JSContext *ctx, JSValueConst this_val,
                               int argc, JSValueConst *argv)
 {
+#if !defined(__wasi__)
     const char *path;
     char buf[PATH_MAX], *res;
     int err;
@@ -2728,6 +2755,8 @@ static JSValue js_os_realpath(JSContext *ctx, JSValueConst this_val,
         err = 0;
     }
     return make_string_error(ctx, buf, err);
+#endif
+    return JS_EXCEPTION;
 }
 
 #if !defined(_WIN32)
@@ -2834,6 +2863,7 @@ static char **build_envp(JSContext *ctx, JSValueConst obj)
     goto done;
 }
 
+#if !defined(__wasi__)
 /* execvpe is not available on non GNU systems */
 static int my_execvpe(const char *filename, char **argv, char **envp)
 {
@@ -2889,11 +2919,13 @@ static int my_execvpe(const char *filename, char **argv, char **envp)
         errno = EACCES;
     return -1;
 }
+#endif
 
 /* exec(args[, options]) -> exitcode */
 static JSValue js_os_exec(JSContext *ctx, JSValueConst this_val,
                           int argc, JSValueConst *argv)
 {
+#if !defined(__wasi__)
     JSValueConst options, args = argv[0];
     JSValue val, ret_val;
     const char **exec_argv, *file = NULL, *str, *cwd = NULL;
@@ -3086,12 +3118,15 @@ static JSValue js_os_exec(JSContext *ctx, JSValueConst this_val,
  exception:
     ret_val = JS_EXCEPTION;
     goto done;
+#endif
+    return JS_EXCEPTION;
 }
 
 /* waitpid(pid, block) -> [pid, status] */
 static JSValue js_os_waitpid(JSContext *ctx, JSValueConst this_val,
                              int argc, JSValueConst *argv)
 {
+#if !defined(__wasi__)
     int pid, status, options, ret;
     JSValue obj;
     
@@ -3114,12 +3149,15 @@ static JSValue js_os_waitpid(JSContext *ctx, JSValueConst this_val,
     JS_DefinePropertyValueUint32(ctx, obj, 1, JS_NewInt32(ctx, status),
                                  JS_PROP_C_W_E);
     return obj;
+#endif
+    return JS_EXCEPTION;
 }    
 
 /* pipe() -> [read_fd, write_fd] or null if error */
 static JSValue js_os_pipe(JSContext *ctx, JSValueConst this_val,
                           int argc, JSValueConst *argv)
 {
+#if !defined(__wasi__)
     int pipe_fds[2], ret;
     JSValue obj;
     
@@ -3134,12 +3172,15 @@ static JSValue js_os_pipe(JSContext *ctx, JSValueConst this_val,
     JS_DefinePropertyValueUint32(ctx, obj, 1, JS_NewInt32(ctx, pipe_fds[1]),
                                  JS_PROP_C_W_E);
     return obj;
+#endif
+    return JS_EXCEPTION;
 }
 
 /* kill(pid, sig) */
 static JSValue js_os_kill(JSContext *ctx, JSValueConst this_val,
                           int argc, JSValueConst *argv)
 {
+#if !defined(__wasi__)
     int pid, sig, ret;
     
     if (JS_ToInt32(ctx, &pid, argv[0]))
@@ -3148,24 +3189,30 @@ static JSValue js_os_kill(JSContext *ctx, JSValueConst this_val,
         return JS_EXCEPTION;
     ret = js_get_errno(kill(pid, sig));
     return JS_NewInt32(ctx, ret);
+#endif
+    return JS_EXCEPTION;
 }
 
 /* dup(fd) */
 static JSValue js_os_dup(JSContext *ctx, JSValueConst this_val,
                          int argc, JSValueConst *argv)
 {
+#if !defined(__wasi__)
     int fd, ret;
     
     if (JS_ToInt32(ctx, &fd, argv[0]))
         return JS_EXCEPTION;
     ret = js_get_errno(dup(fd));
     return JS_NewInt32(ctx, ret);
+#endif
+    return JS_EXCEPTION;
 }
 
 /* dup2(fd) */
 static JSValue js_os_dup2(JSContext *ctx, JSValueConst this_val,
                          int argc, JSValueConst *argv)
 {
+#if !defined(__wasi__)
     int fd, fd2, ret;
     
     if (JS_ToInt32(ctx, &fd, argv[0]))
@@ -3174,6 +3221,8 @@ static JSValue js_os_dup2(JSContext *ctx, JSValueConst this_val,
         return JS_EXCEPTION;
     ret = js_get_errno(dup2(fd, fd2));
     return JS_NewInt32(ctx, ret);
+#endif
+    return JS_EXCEPTION;
 }
 
 #endif /* !_WIN32 */
@@ -3715,7 +3764,9 @@ static const JSCFunctionListEntry js_os_funcs[] = {
     JS_CFUNC_DEF("readlink", 1, js_os_readlink ),
     JS_CFUNC_DEF("exec", 1, js_os_exec ),
     JS_CFUNC_DEF("waitpid", 2, js_os_waitpid ),
+#if !defined(__wasi__)
     OS_FLAG(WNOHANG),
+#endif
     JS_CFUNC_DEF("pipe", 0, js_os_pipe ),
     JS_CFUNC_DEF("kill", 2, js_os_kill ),
     JS_CFUNC_DEF("dup", 1, js_os_dup ),
diff --git a/quickjs.c b/quickjs.c
index a6cab1d..45ad79a 100644
--- a/quickjs.c
+++ b/quickjs.c
@@ -60,7 +60,7 @@
 #define MALLOC_OVERHEAD  8
 #endif
 
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(__wasi__)
 /* define it if printf uses the RNDN rounding mode instead of RNDNA */
 #define CONFIG_PRINTF_RNDN
 #endif
